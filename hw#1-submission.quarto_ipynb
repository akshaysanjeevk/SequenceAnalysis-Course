{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Sequance Analysis Assignment#1\"\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "# Greedy Motif Search \n",
        "\n",
        "Functions written are listed below.\n",
        "- Bulding the position weight matrix: \n",
        "```python\n",
        "from Bio import SeqIO\n",
        "import numpy as np\n",
        "import math\n",
        "\n",
        "def totalcount(x, pseudocount):\n",
        "    alpha = ['A', 'T', 'G', 'C']\n",
        "    counts = np.array([np.sum(x==nt) for nt in alpha])\n",
        "    finalcount = (counts + pseudocount)/(len(x) + 4*pseudocount)\n",
        "    return finalcount\n",
        "\n",
        "def profile(DNA, k, pos, log_odd=True):\n",
        "    N = len(DNA)# or pos0\n",
        "    x = np.empty((N, k), dtype=str) #matrix with k-mers\n",
        "    W = np.empty((4, k)) #position weight matrix\n",
        "    for i in range(N):\n",
        "        x[i, :] = list(DNA[i][pos[i]:pos[i]+k])\n",
        "    for j in range(k):\n",
        "        W[:,j] = totalcount(x[:,j], pseudocount=1)\n",
        "    if log_odd==True: # log-odds matrix\n",
        "        W2 = np.log(W*4)/np.log(4)\n",
        "    else: \n",
        "        W2 = W\n",
        "    return W2\n",
        "```\n",
        "- Computing the log-likelihood ratio of a given sequence `s`. \n",
        "```python\n",
        "def llr(profile, s):\n",
        "    ref = {\n",
        "        'A':0,\n",
        "        'T':1,\n",
        "        'G':2,\n",
        "        'C':3\n",
        "    }\n",
        "    llratio = 0\n",
        "    for i in range(len(s)):\n",
        "        llratio += profile[ref[s[i]], i]\n",
        "    return llratio\n",
        "```\n",
        "- Finding most probable positions in a set of given sequences `DNA`, based on a postion weight matrix `profile`:\n",
        "```python\n",
        "def motifpos(profile, DNA):\n",
        "    N = len(DNA)\n",
        "    k = profile.shape[1]\n",
        "    pos = np.empty(N, dtype=int)\n",
        "    for i in range(N):\n",
        "        maxllr = -math.inf\n",
        "        for j in range(len(DNA[i])-k+1):\n",
        "            llrval = llr(profile, DNA[i][j:j+k])\n",
        "            if llrval > maxllr:\n",
        "                maxllr = llrval\n",
        "                pos[i] = j\n",
        "    return pos  \n",
        "```\n",
        "- This function brings together all the above written functions and executes a greedy search for motifs in the given sequences, `DNA` for `k`-mer in it.\n",
        "def GreedySearch(DNA, k):\n",
        "```python\n",
        "    N = len(DNA)\n",
        "    pos = np.array([np.random.randint(0, len(DNA[i]) - k) for i in range(N)])\n",
        "    while True:\n",
        "        old_pos = pos.copy()\n",
        "        pwm = profile(DNA, k, pos)\n",
        "        pos = motifpos(pwm, DNA)\n",
        "        if np.array_equal(old_pos, pos):\n",
        "            break\n",
        "    return pos\n",
        "```\n",
        "Loding data and computing k-mers from the given datasets:\n",
        "1. `synth_50_strong.fa`\n",
        "```python\n",
        "strong = [str(record.seq) for record in SeqIO.parse(\"synth_50_strong.fa\", \"fasta\")]\n",
        "\n",
        "k=15\n",
        "strong_pos = GreedySearch(strong, k)\n",
        "print(f\"{k}-mers for 'synth_50_strong.fa':\")\n",
        "for i in range(len(strong)):\n",
        "    print(strong[i][strong_pos[i]:strong_pos[i]+k])\n",
        "```\n",
        "1. `synth_50_weak.fa`\n",
        "```python\n",
        "weak = [str(record.seq) for record in SeqIO.parse(\"synth_50_weak.fa\", \"fasta\")]\n",
        "weak_pos = GreedySearch(weak, k)\n",
        "print(f\"{k}-mers for 'synth_50_weak.fa':\") \n",
        "for i in range(len(weak)):\n",
        "    print(weak[i][weak_pos[i]:weak_pos[i]+k])\n",
        "```\n"
      ],
      "id": "f100d502"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}